# Load a kubeconfig file of a Kubernetes cluster

kcfg () 
{ 
    if [ $# -eq 0 ]; then
        unset KUBECONFIG;
        return;
    fi;
    if ! [ -e "$1" ]; then
        echo Creating kubeconfig: $1;
        touch $1;
    fi;
    export KUBECONFIG="$(realpath $1)";
    echo Using kubeconfig: $KUBECONFIG;
    chmod 700 $KUBECONFIG
}

# Get secret content
kgsb() {
  k get secrets $@ -o go-template='{{range $k,$v := .data}}{{printf "%s: " $k}}{{if not $v}}{{$v}}{{else}}{{$v | base64decode}}{{end}}{{"\n"}}{{end}}'
}

# Decoding JSON Web Tokens (JWTs) from the Linux command line

jwtd() {
    if [[ -x $(command -v jq) ]]; then
         JWT=$(jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}")
         echo $JWT
         EXPIRATION_DATE=$(jq .exp//empty <<<$JWT)

        if [[ -z "$EXPIRATION_DATE" ]]; then
           echo "There is no experation date for this token"
        else
         echo "Token expiration date:"
         date -d @$EXPIRATION_DATE
        fi
    fi
}

# Get certificates from de command line

get_certificate() {
  local domain="$1"
  local port="${2:-443}"  # Use port 443 by default if the second argument is not provided

  if [ -z "$domain" ]; then
    echo "Usage: get_certificate <domain> [port]"
    return 1
  fi

  # Print certificate
  echo "#---------------------------------------------------------------"
  echo "#-------------------------CERTIFICATE---------------------------"
  echo "#---------------------------------------------------------------"
  openssl s_client -connect "${domain}:${port}" -servername "${domain}" < /dev/null 2>/dev/null | openssl x509 -text | sed -n '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/p'

  # Print certificate in text format

  echo "#---------------------------------------------------------------"
  echo "#------------------CERTIFICATE IN TEXT FORMAT-------------------"
  echo "#---------------------------------------------------------------"
  openssl s_client -connect "${domain}:${port}" -servername "${domain}" < /dev/null 2>/dev/null | openssl x509 -text -noout
}

# find files customization
if [ $(command -v fd) ]; then
  fdz() {
    local dir
    dir=$(fd -t d --hidden . 2>/dev/null | fzf +m) || return
    \cd "$dir" || return
  }
else
  fdz() {
    local dir
    dir=$(find . -type d 2>/dev/null | fzf +m) || return
    \cd "$dir" || return
  }
fi

