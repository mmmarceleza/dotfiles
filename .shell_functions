# Load a kubeconfig file of a Kubernetes cluster

kcfg () 
{ 
    if [ $# -eq 0 ]; then
        unset KUBECONFIG;
        return;
    fi;
    if ! [ -e "$1" ]; then
        echo Creating kubeconfig: $1;
        touch $1;
    fi;
    export KUBECONFIG="$(realpath $1)";
    echo Using kubeconfig: $KUBECONFIG;
    chmod 700 $KUBECONFIG
}

# Decoding JSON Web Tokens (JWTs) from the Linux command line

jwtd() {
    if [[ -x $(command -v jq) ]]; then
         JWT=$(jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}")
         echo $JWT
         EXPIRATION_DATE=$(jq .exp//empty <<<$JWT)

        if [[ -z "$EXPIRATION_DATE" ]]; then
           echo "There is no experation date for this token"
        else
         echo "Token expiration date:"
         date -d @$EXPIRATION_DATE
        fi
    fi
}

# Get certificates from de command line

get_certificate() {
  local domain="$1"
  local port="${2:-443}"  # Use port 443 by default if the second argument is not provided

  if [ -z "$domain" ]; then
    echo "Usage: get_certificate <domain> [port]"
    return 1
  fi

  # Print certificate
  echo "#---------------------------------------------------------------"
  echo "#-------------------------CERTIFICATE---------------------------"
  echo "#---------------------------------------------------------------"
  openssl s_client -connect "${domain}:${port}" -servername "${domain}" < /dev/null 2>/dev/null | openssl x509 -text | sed -n '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/p'

  # Print certificate in text format

  echo "#---------------------------------------------------------------"
  echo "#------------------CERTIFICATE IN TEXT FORMAT-------------------"
  echo "#---------------------------------------------------------------"
  openssl s_client -connect "${domain}:${port}" -servername "${domain}" < /dev/null 2>/dev/null | openssl x509 -text -noout
}


##
## kubectl port-forward on selected services, combined by all service ports.
##
function kpfz()
{
    local svcs=$(
        FZF_DEFAULT_COMMAND="command kubectl get svc -o json $_NS | svc-ports" \
            fzf -m --ansi --no-preview -1 --exact --select-1 --query="$@"
    )

    if [ -z "$svcs" ]; then
        return
    fi

    pids=()
    for svc in $svcs; do
        local port=${svc##*:}
        local lport=$port
        local name=${svc%%:*}
        if [ $lport -lt 1024 ]; then
            lport=$((lport + 1024))
        fi
        local cmd="kubectl port-forward svc/$name $lport:$port $@"
        command $cmd & pids+=($!)
    done
    trap "echo Killing pids: ${pids[*]}; kill -INT ${pids[*]}" SIGINT SIGTERM SIGHUP EXIT
    wait
    trap - SIGINT SIGTERM SIGHUP EXIT
    sleep 1 # give a chance to prompt appear
}

##
## Same as kpfz, but for a specifc namespace
##
function kpfzn()
{
    local ns="$1"
    shift
    _NS="-n $ns" kpfz "$@"
}

