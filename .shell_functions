y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Load a kubeconfig file of a Kubernetes cluster

kcfg () 
{ 
    if [ $# -eq 0 ]; then
        unset KUBECONFIG;
        return;
    fi;
    if ! [ -e "$1" ]; then
        echo Creating kubeconfig: $1;
        touch $1;
    fi;
    export KUBECONFIG="$(realpath $1)";
    echo Using kubeconfig: $KUBECONFIG;
    chmod 700 $KUBECONFIG
}

# Get secret content
kgsb() {
  k get secrets $@ -o go-template='{{range $k,$v := .data}}{{printf "%s: " $k}}{{if not $v}}{{$v}}{{else}}{{$v | base64decode}}{{end}}{{"\n"}}{{end}}'
}

# Decoding JSON Web Tokens (JWTs) from the Linux command line

jwtd() {
    if [[ -x $(command -v jq) ]]; then
         JWT=$(jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}")
         echo $JWT
         EXPIRATION_DATE=$(jq .exp//empty <<<$JWT)

        if [[ -z "$EXPIRATION_DATE" ]]; then
           echo "There is no experation date for this token"
        else
         echo "Token expiration date:"
         date -d @$EXPIRATION_DATE
        fi
    fi
}

# Get certificates from de command line

get_certificate() {
  local domain="$1"
  local port="${2:-443}"  # Use port 443 by default if the second argument is not provided

  if [ -z "$domain" ]; then
    echo "Usage: get_certificate <domain> [port]"
    return 1
  fi

  # Print certificate
  echo "#---------------------------------------------------------------"
  echo "#-------------------------CERTIFICATE---------------------------"
  echo "#---------------------------------------------------------------"
  openssl s_client -connect "${domain}:${port}" -servername "${domain}" < /dev/null 2>/dev/null | openssl x509 -text | sed -n '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/p'

  # Print certificate in text format

  echo "#---------------------------------------------------------------"
  echo "#------------------CERTIFICATE IN TEXT FORMAT-------------------"
  echo "#---------------------------------------------------------------"
  openssl s_client -connect "${domain}:${port}" -servername "${domain}" < /dev/null 2>/dev/null | openssl x509 -text -noout
}

# find files customization
if [ $(command -v fd) ]; then
  fdz() {
    local dir
    dir=$(fd -t d --hidden . 2>/dev/null | fzf +m) || return
    \cd "$dir" || return
  }
else
  fdz() {
    local dir
    dir=$(find . -type d 2>/dev/null | fzf +m) || return
    \cd "$dir" || return
  }
fi

#pods() {
#  command='kubectl get pods --all-namespaces' fzf \
#    --info=inline --layout=reverse --header-lines=1 \
#    --prompt "$(kubectl config current-context | sed 's/-context$//')> " \
#    --header $'╱ Enter (kubectl exec) ╱ CTRL-O (open log in editor) ╱ CTRL-R (reload) ╱\n\n' \
#    --bind 'start:reload:$command' \
#    --bind 'ctrl-r:reload:$command' \
#    --bind 'ctrl-/:change-preview-window(80%,border-bottom|hidden|)' \
#    --bind 'enter:execute:kubectl exec -it --namespace {1} {2} -- bash' \
#    --bind 'ctrl-o:execute:${EDITOR:-vim} <(kubectl logs --all-containers --namespace {1} {2})' \
#    --preview-window up:follow \
#    --preview 'kubectl logs --follow --all-containers --tail=10000 --namespace {1} {2}' "$@"
#}


# status http code
httpstat() {
    if [[ -z $1 ]]; then
        echo "Use: httpstat <http_code>"
        echo "Exemple: httpstat 400"
    else
        curl "httpstat.us/$1"
    fi
}

function myprs() {
  gh search prs --assignee=@me --state=open --json number,title,repository |
    jq -r '.[] | "\(.number) | \(.repository.nameWithOwner) | \(.title)"' |
    fzf --delimiter '|' \
        --preview 'gh pr view $(echo {} | cut -d"|" -f1) --repo $(echo {} | cut -d"|" -f2)' \
        --preview-window right:60% \
        --height 80% \
        --border rounded \
        --layout reverse \
        --prompt "🔍 Select PR > " \
        --pointer "➜" \
        --header "Enter: open in browser | ctrl-c: exit" \
        --color header:italic,pointer:cyan,prompt:blue \
        --no-separator \
        --padding 1 |
    awk -F'|' '{print $1, "--repo", $2}' |
    xargs gh pr view --web
}

# Adicione esta função ao seu ~/.bashrc ou ~/.zshrc
function gfzfcommit() {
    # Obtém a URL base do repositório GitHub
    # Converte SSH para HTTPS: git@github.com:usuario/repo.git -> https://github.com/usuario/repo
    local remote_url=$(git remote get-url origin | sed 's/:/\//' | sed 's/git@/https:\/\//' | sed 's/\.git$//')
    
    # Se não conseguir obter a URL, exibe erro e sai
    if [ -z "$remote_url" ]; then
        echo "Erro: Não foi possível obter a URL do repositório remoto"
        return 1
    fi

    # Usa o fzf para selecionar o commit
    # %h: hash curto
    # %s: mensagem do commit
    # %ad: data do commit
    # %an: nome do autor
    local commit=$(git log --format="%h %s [%ad] (%an)" --date=short | \
        fzf --ansi \
            --preview 'git show --color=always {1}' \
            --preview-window=right:60% \
            --bind 'ctrl-y:execute-silent(echo -n {1} | pbcopy)' \
            --header 'Press CTRL-Y to copy commit hash')

    # Se um commit foi selecionado
    if [ -n "$commit" ]; then
        # Extrai o hash do commit (primeira palavra da linha)
        local commit_hash=$(echo "$commit" | awk '{print $1}')
        # Monta a URL completa do commit
        local commit_url="$remote_url/commit/$commit_hash"
        # Abre no navegador padrão
        if command -v xdg-open &> /dev/null; then
            xdg-open "$commit_url"  # Linux
        elif command -v open &> /dev/null; then
            open "$commit_url"      # macOS
        else
            echo "URL do commit: $commit_url"
        fi
    fi
}
