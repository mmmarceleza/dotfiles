#!/bin/bash

set -e

# Function to display help
usage() {
  echo "Usage: $0 [desired_version]"
  echo -e "\nIf no parameter is passed, the script will check the current cluster version."
  echo "If a version is provided, the script will verify its existence and compare the images."
  echo -e "\nExample:"
  echo "  $0 v1.26.15+rke2r1"
  exit 0
}

# Check if the user requested help
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  usage
fi

# Functions to display colored messages
success() { echo -e "\e[32m‚úî $1\e[0m"; }
error() { echo -e "\e[31m‚úñ $1\e[0m"; }
info() { echo -e "\e[34m‚Ñπ $1\e[0m"; }
separator() { 
  printf '\e[33m%*s\e[0m\n' "$(tput cols)" | tr ' ' '-' 
}
# separator() { echo -e "\e[33m------------------------------------------------------\e[0m"; }

# Get the current cluster version
CURRENT_VERSION=$(kubectl version -o json | jq -r '.serverVersion.gitVersion')
info "Current cluster version: $CURRENT_VERSION"

# Use the provided version or fallback to the current cluster version
VERSION=${1:-$CURRENT_VERSION}
info "Checking version: $VERSION"

# Verify if the desired version is valid
STATUS_CODE=$(curl -sI -o /dev/null -w "%{http_code}" "https://api.github.com/repos/rancher/rke2/releases/tags/$VERSION")
if [[ "$STATUS_CODE" != "200" ]]; then
  error "Error: Version $VERSION does not exist!\nCheck available versions at:\nhttps://github.com/rancher/rke2/releases"
  exit 1
fi

success "Version $VERSION is valid!"

# Retrieve the URL for the image list file
IMAGES_URL=$(curl -s "https://api.github.com/repos/rancher/rke2/releases/tags/$VERSION" | jq -r '.assets[] | select(.name == "rke2-images-all.linux-amd64.txt") | .browser_download_url')
if [[ -z "$IMAGES_URL" ]]; then
  error "Could not retrieve the image list for version $VERSION."
  exit 1
fi

# Create a temporary directory to store the file
TMP_DIR=$(mktemp -d)
IMAGES_FILE="$TMP_DIR/rke2-images.txt"
info "Downloading image list..."
curl -sL "$IMAGES_URL" -o "$IMAGES_FILE"
success "Image list successfully downloaded!"

# List of components and labels
declare -A COMPONENTS=(
  [cloud-controller-manager]="component=cloud-controller-manager"
  [etcd]="component=etcd"
  [kube-apiserver]="component=kube-apiserver"
  [kube-controller-manager]="component=kube-controller-manager"
  [kube-proxy]="component=kube-proxy"
  [kube-scheduler]="component=kube-scheduler"
  [node-local-dns]="k8s-app=node-local-dns"
  [rke2-coredns-rke2-coredns]="app.kubernetes.io/name=rke2-coredns"
  [rke2-snapshot-controller]="app.kubernetes.io/name=rke2-snapshot-controller"
  [rke2-snapshot-validation]="app.kubernetes.io/name=rke2-snapshot-validation-webhook"
)

# Component verification
info "Checking components in the kube-system namespace..."
for COMPONENT in "${!COMPONENTS[@]}"; do
  LABEL="${COMPONENTS[$COMPONENT]}"
  
  # Add separator before checking each component
  separator
  info "üîç Checking component: $COMPONENT"

  # Get all images for the component, handling multiple Pods
  # readarray -d ' ' -t IMAGES<<<$(kubectl get pods -n kube-system -l "$LABEL" -o jsonpath='{.items[*].spec.containers[*].image}')
  # readarray -d ' ' -t PODS<<<$(kubectl get pods -n kube-system -l "$LABEL" -o jsonpath='{.items[*].metadata.name')

  PODS_IMAGES=$(kubectl get pods -l "$LABEL" -o=custom-columns="PODS:.metadata.name,IMAGES:.spec.containers[*].image" --no-headers)

  while IFS= read -r line; do
      PODS_IMAGES_ARRAY+=("$line")
  done <<< "$PODS_IMAGES"


  if [[ ${#PODS_IMAGES_ARRAY[@]} -eq 0 ]]; then
    error "Component $COMPONENT not found!"
    continue
  fi

  ALL_IMAGES_MATCH=true

  for POD in "${PODS_IMAGES_ARRAY[@]}"; do
    POD_NAME="${POD%% *}"
    POD_IMAGE="${POD##* }"
    NORMALIZED_IMAGE=${POD_IMAGE/index.docker.io\//} # Remove prefix para compara√ß√£o

    if grep -q "$NORMALIZED_IMAGE" "$IMAGES_FILE"; then
      success "$POD_NAME is using the correct image: $POD_IMAGE"
    else
      error "$POD_NAME is outdated! Image in use: $POD_IMAGE"
      ALL_IMAGES_MATCH=false
    fi
  done
  
  unset PODS_IMAGES_ARRAY

  # Display final status for the component
  if $ALL_IMAGES_MATCH; then
    success "‚úÖ All Pods for $COMPONENT are using the correct images."
  else
    error "‚ö† Some Pods for $COMPONENT are outdated."
  fi
done

# Cleanup
test -d "$TMP_DIR" && rm -rf "$TMP_DIR"
success "üéØ Verification completed!"

